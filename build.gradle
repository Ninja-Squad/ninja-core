apply plugin : 'java'
apply plugin : 'eclipse'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply from: 'cobertura.gradle'
apply plugin: 'maven'

group = 'com.ninja-squad'
sourceCompatibility = 1.6

repositories {
    mavenCentral()
}

dependencies {
    compile 'com.google.guava:guava:11.0.2'
    compile 'com.google.code.findbugs:jsr305:2.0.0'
    compile 'javax.servlet:servlet-api:2.5'
    compile 'javax.servlet.jsp:jsp-api:2.1'
    compile 'javax.servlet:jstl:1.1.2'
    compile 'org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final'
    compile 'joda-time:joda-time:2.1'
    compile 'net.sourceforge.findbugs:annotations:1.3.2'
    compile 'org.hibernate:hibernate-core:3.6.10.Final'
    testCompile 'junit:junit:4.+'
    testCompile 'org.mockito:mockito-all:1.9.0'
}

configurations {
    compile.transitive = false
    testCompile.transitive = false
    runtime.transitive = false
    testRuntime.transitive = false
}

[compileJava, compileTestJava]*.options*.encoding = 'ISO-8859-1'

checkstyle {
    sourceSets = [sourceSets.main]
}

checkstyleMain << {
    ant.xslt(in: reports.xml.destination,
             style: new File(configFile.parent, 'checkstyle-noframes-sorted.xsl'),
             out: new File(reports.xml.destination.parent, 'main.html'))
}

pmd {
    sourceSets = [sourceSets.main]
}

pmdMain {
    ignoreFailures = true
    ruleSetFiles = files('config/pmd/ruleSet.xml')
}

findbugs {
    sourceSets = [sourceSets.main]
    ignoreFailures = true
}

findbugsMain {
    reports {
        xml {
            enabled = false
        }
        html {
            enabled = true
        }
    }
}

def sharedManifest = manifest {
    attributes(['Implementation-Title': 'ninja-core', 
                'Implementation-Version': project.version,
                'Implementation-Vendor': 'ninja-squad.com'])
}

jar {
    manifest { 
        from sharedManifest
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
    manifest { 
        from sharedManifest
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    manifest { 
        from sharedManifest
    }
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

eclipseJdt << {
    File f = file('.settings/org.eclipse.core.resources.prefs')
    f.write('eclipse.preferences.version=1\n')
    f.append('encoding/<project>=ISO-8859-1')
}

cleanEclipseJdt << {
    File f = file('.settings/org.eclipse.core.resources.prefs')
    f.delete()
}

uploadArchives {
    repositories {
        mavenDeployer {
            // TODO configure maven repos:
            // repository(url: uri("pomRepo"))
            // snapshotRepository(url: uri("snapshotRepo"))
        }
    }
}

[install.repositories.mavenInstaller, uploadArchives.repositories.mavenDeployer]*.pom*.whenConfigured {pom ->
    pom.dependencies = pom.dependencies.findAll {it.scope != 'test'} // we don't care about test dependencies
    pom.dependencies.findAll {dep -> dep.artifactId != 'guava'}*.optional = true // all compile dependencies are optional except guava
    pom.dependencies*.scope = null // all dependencies are compile time dependencies, and there is no need to say it
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.0-milestone-9'
}